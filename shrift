#!/bin/bash

CWD=$(pwd)

# ansi colors
RED='\033[0;31m'
GREEN='\033[0;32m'
END='\033[0m'

function _version() {
  echo "0.2.0"
}

function _usage() {
  echo "Version: $(_version)"
  echo "usage: $0 [args] specfiles..."
  echo
  echo "-h                 Help"
  echo "-d [container]     Target running docker container"
  echo "-s [hostname]      Target remote host via ssh"
  echo "-o '[opts]'        Raw CLI options to pass to SSH/Docker (must be in quotes)"
  echo "-v                 Enable verbose output"
  echo "--nocolor          Disable color output"
  echo
}

function _error() {
  echo -e "${RED}ERROR: ${1}${END}"
  exit 1
}

function _cleanup() {
  rm $cmd_result
}

function _mktemp() {
  mktemp /tmp/$(basename ${0//-/}).XXX
}

function _print_cmd_summary() {
  local rc=$1
  local cmd=$2
  if [[ $rc == 0 ]]; then
    echo -e "  (${GREEN}0${END}) ${GREEN}${cmd}${END}"
  else
    echo -e "  (${RED}${rc}${END}) ${RED}${cmd}${END}"
  fi
}

function _print_cmd_output() {
  while read line; do
    echo "    ${line}"
  done < $1
}

function _print_dot() {
  if [ $1 -eq 0 ]; then
    echo -e -n ${GREEN}.${END}
  else
    echo -e -n ${RED}F${END}
  fi
}

function _run_file() {
  local file=$1
  local block=""
  local block_printed=0
  [ $verbose -gt 1 ] && echo && echo "# ${1}"
  # loop through specs
  while read spec; do
    # check for empty line
    if [[ "$spec" == "" ]]; then
      block=""
      block_printed=0
      continue
    fi
    # handle commented blocks
    if [ -z "$(echo ${spec} | cut -d'#' -f1)" ]; then
      block="$spec"
      block_printed=0
      continue
    fi

    # grab the first command of the spec
    firstcmd=$(echo ${spec} | cut -d' ' -f1)

    # override attempts to source a file from spec and source in execution
    if [[ $firstcmd == "source" ]] || [[ $firstcmd == "." ]]; then
      cd $(dirname $file) && source $(echo ${spec} | cut -d' ' -f2) && cd $CWD
      continue
    fi

    # look for inline function calls and export
    if [[ $firstcmd == "function" ]] || [[ ${firstcmd: -2} == "()" ]]; then
      eval ${spec}
      continue
    fi

    # execute spec command
    case $driver in
      docker) docker ${opts} exec -t ${target} /bin/bash -c "$(declare -f -x); ${spec}" &> $cmd_result;
              cmd_rc=$?;;
      ssh)    ssh ${opts} -nx ${target} "$(declare -f -x); ${spec}" &> $cmd_result;
              cmd_rc=$?;;
      local)  eval ${spec} &> $cmd_result;
              cmd_rc=$?;;
    esac

    # handle results
    let total_specs+=1
    if [ $cmd_rc -ne 0 ]; then
      exit_status=1
      let failed_specs+=1
    fi

    if [[ $cmd_rc -ne 0 || $verbose == 1 ]]; then
      if [ $block_printed -eq 0 ]; then
        block_printed=1
        echo
        [ ! -z "$block" ] && echo $block
      fi
      _print_cmd_summary $cmd_rc "${spec}"
      _print_cmd_output $cmd_result
    fi

    result_summary+=$(_print_dot $cmd_rc)
  done < $file
}

function _main() {
  driver='local'
  opts=''
  verbose=0
  nocolor=0
  spec_files=()

  # parse cli args
  while [ ! -z $1 ]; do
    case $1 in
      -h|--help)  _usage; exit 0;;
      -d)         shift; driver='docker'; target=$1;;
      -s)         shift; driver='ssh'; target=$1;;
      -o)         shift; opts="${1}";;
      -v)         verbose=1;;
      --nocolor)  nocolor=1;;
      *)          spec_files+=("$1");;
    esac
    shift
  done

  # use cwd if no spec_files specified
  [ ${#spec_files[@]} -ge 1 ] || spec_files=('.')

  # test cli arg completeness
  if [[ $driver == "docker" ]]; then
    if [ -z $target ]; then
      _usage && _error "No target container specified"
    fi
    if ! docker info &> /dev/null; then
      _error "Cannot connect to docker daemon"
    fi
    if ! docker inspect $target &> /dev/null; then
      _error "No such container ${target}"
    fi
  fi

  # disable colors
  if [ $nocolor -ne 0 ]; then
    GREEN=''
    RED=''
    END=''
  fi

  # global run state
  total_specs=0
  failed_specs=0
  result_summary=""
  cmd_result=$(_mktemp)
  exit_status=0

  # cleanup
  trap _cleanup EXIT

  # export by default
  set -a
  export -f _version

  # exec all files
  for entry in "${spec_files[@]}"; do
    [ -f $entry ] && _run_file $entry
    if [ -d $entry ]; then
      for child in $(find $entry -name "*_spec.sh" -maxdepth 1); do
        _run_file $child
      done
    fi
  done

  # display results
  echo -e "\n${result_summary}"
  echo "${total_specs} tests, ${failed_specs} failed"

  # return exit code
  exit $exit_status
}

# test if script is being called or sourced
if [[ $(basename ${0//-/}) == "shrift" ]]; then
  _main "$@"
fi
