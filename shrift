#!/bin/bash

#ANSI COLORS
RED='\033[0;31m'
GREEN='\033[0;32m'
END='\033[0m'

function _usage() {
  echo "usage: $0 [args] specfiles..."
  echo
  echo "-h                 Help"
  echo "-d [container]     Target running docker container"
  echo "-v                 Enable verbose output"
  echo
}

function _error() {
  echo -e "${RED}ERROR${END}: ${1}"
  exit 1
}

function _print_cmd_summary() {
  local rc=$1
  local cmd=$2
  if [[ $rc == 0 ]]; then
    echo -e "${GREEN}Success 0${END}: ${cmd}"
  else
    echo -e "${RED}Failure ${rc}${END}: ${cmd}"
  fi
}

function _print_cmd_output() {
  while read line; do
    echo "  ${line}"
  done < $1
}

function _print_dot() {
  if [ $1 -eq 0 ]; then
    echo -e -n ${GREEN}.${END}
  else
    echo -e -n ${RED}F${END}
  fi
}

function _run_file() {
  [ $verbose -eq 1 ] && echo "# ${1}"
  # loop through specs
  while read spec; do
    # skip comments
    if echo $spec | grep -q '^#'; then
      continue
    fi

    # form command string
    case $driver in
      docker) cmd="docker exec ${target} ${spec}";;
      local)  cmd="${spec}";;
    esac

    # execute command
    eval "${cmd}" &> $cmd_result
    cmd_rc=$?

    # handle results
    let total_specs+=1
    if [ $cmd_rc -ne 0 ]; then
      exit_status=1
      let failed_specs+=1
      _print_cmd_summary $cmd_rc "${spec}"
      _print_cmd_output $cmd_result
    elif [[ $verbose == 1 ]]; then
      _print_cmd_summary $cmd_rc "${spec}"
      _print_cmd_output $cmd_result
    fi
    result_summary+=$(_print_dot $cmd_rc)
  done < $1
}

function _main() {
  driver='local'
  verbose=0
  spec_files=()

  # parse cli args
  while [ ! -z $1 ]; do
    case $1 in
      -h) _usage; exit 0;;
      -d) shift; driver='docker'; target=$1;;
      -v) verbose=1;;
      *)  spec_files+=("$1");;
    esac
    shift
  done

  # use cwd if no spec_files specified
  [ ${#spec_files[@]} -ge 1 ] || spec_files=('.')

  # test cli arg completeness
  if [[ $driver == "docker" ]]; then
    if [ -z $target ]; then
      _usage && _error "No target container specified"
    fi
    if ! docker info &> /dev/null; then
      _error "Cannot connect to docker daemon"
    fi
    if ! docker ps | grep -q $target; then
      _error "No such container ${target}"
    fi
  fi

  # global run state
  total_specs=0
  failed_specs=0
  result_summary=""
  cmd_result=$(mktemp /tmp/$0.XXX)
  exit_status=0

  # exec all files
  for entry in "${spec_files[@]}"; do
    [ -f $entry ] && _run_file $entry
    if [ -d $entry ]; then
      for child in $(find $entry -name "*_spec.sh" -maxdepth 1); do
        _run_file $child
      done
    fi
  done

  # display results
  echo -e "\n${result_summary}"
  echo "${total_specs} tests, ${failed_specs} failed"

  # cleanup
  rm $cmd_result

  # return exit code
  exit $exit_status
}

# test if script is being called or sourced
if [[ $(basename ${0//-/}) == "shrift" ]]; then
  _main $@
fi
